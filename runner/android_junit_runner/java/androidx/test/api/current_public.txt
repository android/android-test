// Signature format: 3.0
package androidx.test.filters {

  public abstract class AbstractFilter extends org.junit.runner.manipulation.Filter {
    ctor public AbstractFilter();
    method protected abstract boolean evaluateTest(org.junit.runner.Description!);
    method protected java.util.List<java.lang.annotation.Annotation!>! getClassAnnotations(org.junit.runner.Description!);
    method protected java.util.List<java.lang.annotation.Annotation!>! getMethodAnnotations(org.junit.runner.Description!);
    method public boolean shouldRun(org.junit.runner.Description!);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface FlakyTest {
    method public abstract int bugId() default -1;
    method public abstract String detail() default "";
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface LargeTest {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface MediumTest {
  }

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD}) public @interface RequiresDevice {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD}) public @interface SdkSuppress {
    method public abstract String codeName() default "unset";
    method public abstract int[] excludedSdks() default {};
    method public abstract int maxSdkVersion() default java.lang.Integer.MAX_VALUE;
    method public abstract int minSdkVersion() default 1;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface SmallTest {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface Suppress {
  }

}

package androidx.test.orchestrator.callback {

  @javax.annotation.processing.Generated("tmp_aidl_gen_path") public interface OrchestratorCallback extends android.os.IInterface {
    method public void addTest(String!) throws android.os.RemoteException;
    method public void sendTestNotification(android.os.Bundle!) throws android.os.RemoteException;
  }

  public abstract static class OrchestratorCallback.Stub extends com.google.android.aidl.BaseStub implements androidx.test.orchestrator.callback.OrchestratorCallback {
    ctor public OrchestratorCallback.Stub();
    method public static androidx.test.orchestrator.callback.OrchestratorCallback! asInterface(android.os.IBinder!);
  }

  public static class OrchestratorCallback.Stub.Proxy extends com.google.android.aidl.BaseProxy implements androidx.test.orchestrator.callback.OrchestratorCallback {
    method public void addTest(String!) throws android.os.RemoteException;
    method public void sendTestNotification(android.os.Bundle!) throws android.os.RemoteException;
  }

}

package androidx.test.orchestrator.junit {

  public final class BundleJUnitUtils {
    method public static android.os.Bundle! getBundleFromDescription(org.junit.runner.Description!);
    method public static android.os.Bundle! getBundleFromFailure(org.junit.runner.notification.Failure!);
    method public static android.os.Bundle! getBundleFromResult(org.junit.runner.Result!);
    method public static android.os.Bundle! getBundleFromThrowable(org.junit.runner.Description!, Throwable!);
    method public static androidx.test.orchestrator.junit.ParcelableDescription! getDescription(android.os.Bundle!);
    method public static androidx.test.orchestrator.junit.ParcelableFailure! getFailure(android.os.Bundle!);
    method public static androidx.test.orchestrator.junit.ParcelableResult! getResult(android.os.Bundle!);
  }

  public final class ParcelableDescription implements android.os.Parcelable {
    ctor public ParcelableDescription(String!);
    ctor public ParcelableDescription(org.junit.runner.Description!);
    method public int describeContents();
    method public String! getClassName();
    method public String! getDisplayName();
    method public String! getMethodName();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.orchestrator.junit.ParcelableDescription!>! CREATOR;
  }

  public final class ParcelableFailure implements android.os.Parcelable {
    ctor public ParcelableFailure(androidx.test.orchestrator.junit.ParcelableDescription!, String!);
    ctor public ParcelableFailure(androidx.test.orchestrator.junit.ParcelableDescription!, Throwable!);
    ctor public ParcelableFailure(org.junit.runner.notification.Failure!);
    method public int describeContents();
    method public androidx.test.orchestrator.junit.ParcelableDescription! getDescription();
    method public String! getTrace();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.orchestrator.junit.ParcelableFailure!>! CREATOR;
  }

  public final class ParcelableResult implements android.os.Parcelable {
    ctor public ParcelableResult(java.util.List<androidx.test.orchestrator.junit.ParcelableFailure!>!);
    ctor public ParcelableResult(org.junit.runner.Result!);
    method public int describeContents();
    method public int getFailureCount();
    method public java.util.List<androidx.test.orchestrator.junit.ParcelableFailure!>! getFailures();
    method public boolean wasSuccessful();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.orchestrator.junit.ParcelableResult!>! CREATOR;
  }

}

package androidx.test.orchestrator.listeners {

  public final class OrchestrationListenerManager {
    ctor public OrchestrationListenerManager(android.app.Instrumentation!);
    method public void addListener(androidx.test.orchestrator.listeners.OrchestrationRunListener!);
    method public void handleNotification(android.os.Bundle!);
    method public void orchestrationRunStarted(int);
    method public void testProcessFinished(String!);
    method public void testProcessStarted(androidx.test.orchestrator.junit.ParcelableDescription!);
    field public static final String KEY_TEST_EVENT = "TestEvent";
  }

  public enum OrchestrationListenerManager.TestEvent {
    enum_constant public static final androidx.test.orchestrator.listeners.OrchestrationListenerManager.TestEvent TEST_ASSUMPTION_FAILURE;
    enum_constant public static final androidx.test.orchestrator.listeners.OrchestrationListenerManager.TestEvent TEST_FAILURE;
    enum_constant public static final androidx.test.orchestrator.listeners.OrchestrationListenerManager.TestEvent TEST_FINISHED;
    enum_constant public static final androidx.test.orchestrator.listeners.OrchestrationListenerManager.TestEvent TEST_IGNORED;
    enum_constant public static final androidx.test.orchestrator.listeners.OrchestrationListenerManager.TestEvent TEST_RUN_FINISHED;
    enum_constant public static final androidx.test.orchestrator.listeners.OrchestrationListenerManager.TestEvent TEST_RUN_STARTED;
    enum_constant public static final androidx.test.orchestrator.listeners.OrchestrationListenerManager.TestEvent TEST_STARTED;
  }

  public abstract class OrchestrationRunListener {
    ctor public OrchestrationRunListener();
    method public android.app.Instrumentation! getInstrumentation();
    method public void orchestrationRunStarted(int);
    method public void setInstrumentation(android.app.Instrumentation!);
    method public void testAssumptionFailure(androidx.test.orchestrator.junit.ParcelableFailure!);
    method public void testFailure(androidx.test.orchestrator.junit.ParcelableFailure!);
    method public void testFinished(androidx.test.orchestrator.junit.ParcelableDescription!);
    method public void testIgnored(androidx.test.orchestrator.junit.ParcelableDescription!);
    method public void testProcessFinished(String!);
    method public void testRunFinished(androidx.test.orchestrator.junit.ParcelableResult!);
    method public void testRunStarted(androidx.test.orchestrator.junit.ParcelableDescription!);
    method public void testStarted(androidx.test.orchestrator.junit.ParcelableDescription!);
  }

}

package androidx.test.orchestrator.listeners.result {

  public interface ITestRunListener {
    method public void testAssumptionFailure(androidx.test.orchestrator.listeners.result.TestIdentifier!, String!);
    method public void testEnded(androidx.test.orchestrator.listeners.result.TestIdentifier!, java.util.Map<java.lang.String!,java.lang.String!>!);
    method public void testFailed(androidx.test.orchestrator.listeners.result.TestIdentifier!, String!);
    method public void testIgnored(androidx.test.orchestrator.listeners.result.TestIdentifier!);
    method public void testRunEnded(long, java.util.Map<java.lang.String!,java.lang.String!>!);
    method public void testRunFailed(String!);
    method public void testRunStarted(String!, int);
    method public void testRunStopped(long);
    method public void testStarted(androidx.test.orchestrator.listeners.result.TestIdentifier!);
  }

  public class TestIdentifier {
    ctor public TestIdentifier(String!, String!);
    method public String! getClassName();
    method public String! getTestName();
  }

  public class TestResult {
    ctor public TestResult();
    method public long getEndTime();
    method public java.util.Map<java.lang.String!,java.lang.String!>! getMetrics();
    method public String! getStackTrace();
    method public long getStartTime();
    method public androidx.test.orchestrator.listeners.result.TestResult.TestStatus! getStatus();
    method public void setEndTime(long);
    method public void setMetrics(java.util.Map<java.lang.String!,java.lang.String!>!);
    method public void setStackTrace(String!);
    method public androidx.test.orchestrator.listeners.result.TestResult! setStatus(androidx.test.orchestrator.listeners.result.TestResult.TestStatus!);
  }

  public enum TestResult.TestStatus {
    enum_constant public static final androidx.test.orchestrator.listeners.result.TestResult.TestStatus ASSUMPTION_FAILURE;
    enum_constant public static final androidx.test.orchestrator.listeners.result.TestResult.TestStatus FAILURE;
    enum_constant public static final androidx.test.orchestrator.listeners.result.TestResult.TestStatus IGNORED;
    enum_constant public static final androidx.test.orchestrator.listeners.result.TestResult.TestStatus INCOMPLETE;
    enum_constant public static final androidx.test.orchestrator.listeners.result.TestResult.TestStatus PASSED;
  }

  public class TestRunResult implements androidx.test.orchestrator.listeners.result.ITestRunListener {
    ctor public TestRunResult();
    method public java.util.Set<androidx.test.orchestrator.listeners.result.TestIdentifier!>! getCompletedTests();
    method public long getElapsedTime();
    method public String! getName();
    method public int getNumAllFailedTests();
    method public int getNumCompleteTests();
    method public int getNumTests();
    method public int getNumTestsInState(androidx.test.orchestrator.listeners.result.TestResult.TestStatus!);
    method public String! getRunFailureMessage();
    method public java.util.Map<java.lang.String!,java.lang.String!>! getRunMetrics();
    method public java.util.Map<androidx.test.orchestrator.listeners.result.TestIdentifier!,androidx.test.orchestrator.listeners.result.TestResult!>! getTestResults();
    method public String! getTextSummary();
    method public boolean hasFailedTests();
    method public boolean isRunComplete();
    method public boolean isRunFailure();
    method public void setAggregateMetrics(boolean);
    method public void setRunComplete(boolean);
    method public void testAssumptionFailure(androidx.test.orchestrator.listeners.result.TestIdentifier!, String!);
    method public void testEnded(androidx.test.orchestrator.listeners.result.TestIdentifier!, java.util.Map<java.lang.String!,java.lang.String!>!);
    method public void testFailed(androidx.test.orchestrator.listeners.result.TestIdentifier!, String!);
    method public void testIgnored(androidx.test.orchestrator.listeners.result.TestIdentifier!);
    method public void testRunEnded(long, java.util.Map<java.lang.String!,java.lang.String!>!);
    method public void testRunFailed(String!);
    method public void testRunStarted(String!, int);
    method public void testRunStopped(long);
    method public void testStarted(androidx.test.orchestrator.listeners.result.TestIdentifier!);
  }

}

package androidx.test.runner {

  @Deprecated public final class AndroidJUnit4 extends org.junit.runner.Runner implements org.junit.runner.manipulation.Filterable org.junit.runner.manipulation.Sortable {
    ctor @Deprecated public AndroidJUnit4(Class<?>!) throws org.junit.runners.model.InitializationError;
    method @Deprecated public void filter(org.junit.runner.manipulation.Filter!) throws org.junit.runner.manipulation.NoTestsRemainException;
    method @Deprecated public org.junit.runner.Description! getDescription();
    method @Deprecated public void run(org.junit.runner.notification.RunNotifier!);
    method @Deprecated public void sort(org.junit.runner.manipulation.Sorter!);
  }

  public class AndroidJUnitRunner extends androidx.test.runner.MonitoringInstrumentation {
    ctor public AndroidJUnitRunner();
  }

  @Deprecated public class UsageTrackerFacilitator {
    ctor @Deprecated public UsageTrackerFacilitator(boolean);
    method @Deprecated public void sendUsages();
    method @Deprecated public boolean shouldTrackUsage();
    method @Deprecated public void trackUsage(String!, String!);
  }

}

package androidx.test.runner.intercepting {

  public abstract class SingleActivityFactory<T extends android.app.Activity> implements androidx.test.runner.intercepting.InterceptingActivityFactory {
    ctor public SingleActivityFactory(Class<T!>!);
    method protected abstract T! create(android.content.Intent!);
    method public final android.app.Activity! create(ClassLoader!, String!, android.content.Intent!);
    method public final Class<T!>! getActivityClassToIntercept();
    method public final boolean shouldIntercept(ClassLoader!, String!, android.content.Intent!);
  }

}

package androidx.test.runner.screenshot {

  @Deprecated public class BasicScreenCaptureProcessor implements androidx.test.runner.screenshot.ScreenCaptureProcessor {
    ctor @Deprecated public BasicScreenCaptureProcessor();
    method @Deprecated protected String! getDefaultFilename();
    method @Deprecated protected String! getFilename(String!);
    method @Deprecated public String! process(androidx.test.runner.screenshot.ScreenCapture!) throws java.io.IOException;
    field @Deprecated protected String! mDefaultFilenamePrefix;
    field @Deprecated protected java.io.File! mDefaultScreenshotPath;
    field @Deprecated protected String! mFileNameDelimiter;
    field @Deprecated protected String! mTag;
  }

  @Deprecated public final class ScreenCapture {
    method @Deprecated public android.graphics.Bitmap! getBitmap();
    method @Deprecated public android.graphics.Bitmap.CompressFormat! getFormat();
    method @Deprecated public String! getName();
    method @Deprecated public void process() throws java.io.IOException;
    method @Deprecated public void process(java.util.Set<androidx.test.runner.screenshot.ScreenCaptureProcessor!>) throws java.io.IOException;
    method @Deprecated public androidx.test.runner.screenshot.ScreenCapture! setFormat(android.graphics.Bitmap.CompressFormat!);
    method @Deprecated public androidx.test.runner.screenshot.ScreenCapture! setName(String!);
  }

  @Deprecated public interface ScreenCaptureProcessor {
    method @Deprecated public String! process(androidx.test.runner.screenshot.ScreenCapture!) throws java.io.IOException;
  }

  @Deprecated public final class Screenshot {
    ctor @Deprecated public Screenshot();
    method @Deprecated public static void addScreenCaptureProcessors(java.util.Set<androidx.test.runner.screenshot.ScreenCaptureProcessor!>!);
    method @Deprecated public static androidx.test.runner.screenshot.ScreenCapture! capture() throws androidx.test.runner.screenshot.Screenshot.ScreenShotException;
    method @Deprecated public static androidx.test.runner.screenshot.ScreenCapture! capture(android.app.Activity) throws androidx.test.runner.screenshot.Screenshot.ScreenShotException;
    method @Deprecated public static androidx.test.runner.screenshot.ScreenCapture! capture(android.view.View) throws androidx.test.runner.screenshot.Screenshot.ScreenShotException;
    method @Deprecated public static void setScreenshotProcessors(java.util.Set<androidx.test.runner.screenshot.ScreenCaptureProcessor!>!);
  }

  @Deprecated public static final class Screenshot.ScreenShotException extends java.lang.RuntimeException {
  }

  @Deprecated public class UiAutomationWrapper {
    method @Deprecated public android.graphics.Bitmap! takeScreenshot();
  }

}

package androidx.test.runner.suites {

  @org.junit.runner.RunWith(RunnerSuite.class) public final class AndroidClasspathSuite {
  }

}

package androidx.test.services.events {

  public final class AnnotationInfo implements android.os.Parcelable {
    ctor public AnnotationInfo(String, java.util.List<androidx.test.services.events.AnnotationValue!>);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.AnnotationInfo!>! CREATOR;
    field public final String name;
    field public final java.util.List<androidx.test.services.events.AnnotationValue!> values;
  }

  public final class AnnotationValue implements android.os.Parcelable {
    ctor public AnnotationValue(String, java.util.List<java.lang.String!>, String);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.AnnotationValue!>! CREATOR;
    field public final String fieldName;
    field public final java.util.List<java.lang.String!> fieldValues;
    field public final String valueType;
  }

  public final class ErrorInfo implements android.os.Parcelable {
    ctor public ErrorInfo(android.os.Parcel);
    ctor public ErrorInfo(String?, String?, String);
    method public static androidx.test.services.events.ErrorInfo! createFromFailure(org.junit.runner.notification.Failure!);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.ErrorInfo!>! CREATOR;
    field public final String? errorMessage;
    field public final String? errorType;
    field public final String stackTrace;
  }

  public final class FailureInfo implements android.os.Parcelable {
    ctor public FailureInfo(android.os.Parcel);
    ctor public FailureInfo(String?, String?, String, androidx.test.services.events.TestCaseInfo);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.FailureInfo!>! CREATOR;
    field public final String? failureMessage;
    field public final String? failureType;
    field public final String stackTrace;
    field public final androidx.test.services.events.TestCaseInfo testCase;
  }

  public final class ParcelableConverter {
    method public static androidx.test.services.events.AnnotationInfo getAnnotation(java.lang.annotation.Annotation);
    method public static java.util.List<androidx.test.services.events.AnnotationInfo!> getAnnotationsFromArray(java.lang.annotation.Annotation![]);
    method public static java.util.List<androidx.test.services.events.AnnotationInfo!> getAnnotationsFromCollection(java.util.Collection<java.lang.annotation.Annotation!>);
    method public static androidx.test.services.events.FailureInfo getFailure(org.junit.runner.notification.Failure) throws androidx.test.services.events.TestEventException;
    method public static java.util.List<androidx.test.services.events.FailureInfo!> getFailuresFromList(java.util.List<org.junit.runner.notification.Failure!>) throws androidx.test.services.events.TestEventException;
    method public static androidx.test.services.events.TestCaseInfo getTestCaseFromDescription(org.junit.runner.Description) throws androidx.test.services.events.TestEventException;
    method public static boolean isValidJUnitDescription(org.junit.runner.Description);
  }

  public final class TestCaseInfo implements android.os.Parcelable {
    ctor public TestCaseInfo(android.os.Parcel);
    ctor public TestCaseInfo(String, String, java.util.List<androidx.test.services.events.AnnotationInfo!>, java.util.List<androidx.test.services.events.AnnotationInfo!>);
    method public int describeContents();
    method public String getClassAndMethodName();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.TestCaseInfo!>! CREATOR;
    field public final java.util.List<androidx.test.services.events.AnnotationInfo!> classAnnotations;
    field public final String className;
    field public final java.util.List<androidx.test.services.events.AnnotationInfo!> methodAnnotations;
    field public final String methodName;
  }

  public class TestEventException extends java.lang.Exception {
    ctor public TestEventException(String);
    ctor public TestEventException(String, Throwable);
  }

  public final class TestRunInfo implements android.os.Parcelable {
    ctor public TestRunInfo(android.os.Parcel);
    ctor public TestRunInfo(String, java.util.List<androidx.test.services.events.TestCaseInfo!>);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.TestRunInfo!>! CREATOR;
    field public final java.util.List<androidx.test.services.events.TestCaseInfo!> testCases;
    field public final String testRunName;
  }

  public final class TestStatus implements android.os.Parcelable {
    ctor public TestStatus(android.os.Parcel);
    ctor public TestStatus(androidx.test.services.events.TestStatus.Status);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.TestStatus!>! CREATOR;
    field public androidx.test.services.events.TestStatus.Status status;
  }

  public enum TestStatus.Status {
    enum_constant public static final androidx.test.services.events.TestStatus.Status ABORTED;
    enum_constant public static final androidx.test.services.events.TestStatus.Status CANCELLED;
    enum_constant public static final androidx.test.services.events.TestStatus.Status FAILED;
    enum_constant public static final androidx.test.services.events.TestStatus.Status IGNORED;
    enum_constant public static final androidx.test.services.events.TestStatus.Status PASSED;
    enum_constant public static final androidx.test.services.events.TestStatus.Status SKIPPED;
  }

  public final class TimeStamp implements android.os.Parcelable {
    ctor public TimeStamp(android.os.Parcel);
    ctor public TimeStamp(Long, Integer);
    method public int describeContents();
    method public static androidx.test.services.events.TimeStamp! now();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.TimeStamp!>! CREATOR;
    field public final Integer nanos;
    field public final Long seconds;
  }

}

package androidx.test.services.events.discovery {

  @javax.annotation.processing.Generated("tmp_aidl_gen_path") public interface ITestDiscoveryEvent extends android.os.IInterface {
    method public void send(androidx.test.services.events.discovery.TestDiscoveryEvent!) throws android.os.RemoteException;
  }

  public abstract static class ITestDiscoveryEvent.Stub extends com.google.android.aidl.BaseStub implements androidx.test.services.events.discovery.ITestDiscoveryEvent {
    ctor public ITestDiscoveryEvent.Stub();
    method public static androidx.test.services.events.discovery.ITestDiscoveryEvent! asInterface(android.os.IBinder!);
  }

  public static class ITestDiscoveryEvent.Stub.Proxy extends com.google.android.aidl.BaseProxy implements androidx.test.services.events.discovery.ITestDiscoveryEvent {
    method public void send(androidx.test.services.events.discovery.TestDiscoveryEvent!) throws android.os.RemoteException;
  }

  public class TestDiscoveryErrorEvent extends androidx.test.services.events.discovery.TestDiscoveryEvent {
    ctor public TestDiscoveryErrorEvent(androidx.test.services.events.ErrorInfo, androidx.test.services.events.TimeStamp);
    field public final androidx.test.services.events.ErrorInfo error;
    field public final androidx.test.services.events.TimeStamp timeStamp;
  }

  public abstract class TestDiscoveryEvent implements android.os.Parcelable {
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.discovery.TestDiscoveryEvent!>! CREATOR;
  }

  public class TestDiscoveryFinishedEvent extends androidx.test.services.events.discovery.TestDiscoveryEvent {
    ctor public TestDiscoveryFinishedEvent();
  }

  public class TestDiscoveryStartedEvent extends androidx.test.services.events.discovery.TestDiscoveryEvent {
    ctor public TestDiscoveryStartedEvent();
  }

  public class TestFoundEvent extends androidx.test.services.events.discovery.TestDiscoveryEvent {
    ctor public TestFoundEvent(androidx.test.services.events.TestCaseInfo);
    field public final androidx.test.services.events.TestCaseInfo testCase;
  }

}

package androidx.test.services.events.platform {

  @javax.annotation.processing.Generated("tmp_aidl_gen_path") public interface ITestPlatformEvent extends android.os.IInterface {
    method public void send(androidx.test.services.events.platform.TestPlatformEvent!) throws android.os.RemoteException;
  }

  public abstract static class ITestPlatformEvent.Stub extends com.google.android.aidl.BaseStub implements androidx.test.services.events.platform.ITestPlatformEvent {
    ctor public ITestPlatformEvent.Stub();
    method public static androidx.test.services.events.platform.ITestPlatformEvent! asInterface(android.os.IBinder!);
  }

  public static class ITestPlatformEvent.Stub.Proxy extends com.google.android.aidl.BaseProxy implements androidx.test.services.events.platform.ITestPlatformEvent {
    method public void send(androidx.test.services.events.platform.TestPlatformEvent!) throws android.os.RemoteException;
  }

  public class TestCaseErrorEvent extends androidx.test.services.events.platform.TestPlatformEvent {
    ctor public TestCaseErrorEvent(androidx.test.services.events.TestCaseInfo, androidx.test.services.events.ErrorInfo, androidx.test.services.events.TimeStamp);
    field public final androidx.test.services.events.ErrorInfo error;
    field public final androidx.test.services.events.TestCaseInfo testCase;
    field public final androidx.test.services.events.TimeStamp timeStamp;
  }

  public class TestCaseFinishedEvent extends androidx.test.services.events.platform.TestPlatformEvent {
    ctor public TestCaseFinishedEvent(androidx.test.services.events.TestCaseInfo, androidx.test.services.events.TestStatus, androidx.test.services.events.TimeStamp);
    field public final androidx.test.services.events.TestCaseInfo testCase;
    field public final androidx.test.services.events.TestStatus testStatus;
    field public final androidx.test.services.events.TimeStamp timeStamp;
  }

  public final class TestCaseStartedEvent extends androidx.test.services.events.platform.TestPlatformEvent {
    ctor public TestCaseStartedEvent(android.os.Parcel!);
    ctor public TestCaseStartedEvent(androidx.test.services.events.TestCaseInfo, androidx.test.services.events.TimeStamp);
    method public androidx.test.services.events.platform.TestPlatformEvent.EventType! instanceType();
    field public final androidx.test.services.events.TestCaseInfo testCase;
    field public final androidx.test.services.events.TimeStamp timeStamp;
  }

  public abstract class TestPlatformEvent implements android.os.Parcelable {
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.platform.TestPlatformEvent!>! CREATOR;
  }

  public enum TestPlatformEvent.EventType {
    enum_constant public static final androidx.test.services.events.platform.TestPlatformEvent.EventType TEST_CASE_ERROR;
    enum_constant public static final androidx.test.services.events.platform.TestPlatformEvent.EventType TEST_CASE_FINISHED;
    enum_constant public static final androidx.test.services.events.platform.TestPlatformEvent.EventType TEST_CASE_STARTED;
    enum_constant public static final androidx.test.services.events.platform.TestPlatformEvent.EventType TEST_RUN_ERROR;
    enum_constant public static final androidx.test.services.events.platform.TestPlatformEvent.EventType TEST_RUN_FINISHED;
    enum_constant public static final androidx.test.services.events.platform.TestPlatformEvent.EventType TEST_RUN_STARTED;
  }

  public final class TestPlatformEventFactory implements android.os.Parcelable.Creator<androidx.test.services.events.platform.TestPlatformEvent> {
    ctor public TestPlatformEventFactory();
    method public androidx.test.services.events.platform.TestPlatformEvent! createFromParcel(android.os.Parcel!);
    method public androidx.test.services.events.platform.TestPlatformEvent![]! newArray(int);
  }

  public class TestRunErrorEvent extends androidx.test.services.events.platform.TestPlatformEvent {
    ctor public TestRunErrorEvent(androidx.test.services.events.TestRunInfo, androidx.test.services.events.ErrorInfo, androidx.test.services.events.TimeStamp);
    field public final androidx.test.services.events.ErrorInfo error;
    field public final androidx.test.services.events.TestRunInfo testRun;
    field public final androidx.test.services.events.TimeStamp timeStamp;
  }

  public class TestRunFinishedEvent extends androidx.test.services.events.platform.TestPlatformEvent {
    ctor public TestRunFinishedEvent(androidx.test.services.events.TestRunInfo, androidx.test.services.events.TestStatus, androidx.test.services.events.TimeStamp);
    field public final androidx.test.services.events.TestStatus! runStatus;
    field public final androidx.test.services.events.TestRunInfo! testRun;
    field public final androidx.test.services.events.TimeStamp! timeStamp;
  }

  public class TestRunStartedEvent extends androidx.test.services.events.platform.TestPlatformEvent {
    ctor public TestRunStartedEvent(android.os.Parcel!);
    ctor public TestRunStartedEvent(androidx.test.services.events.TestRunInfo, androidx.test.services.events.TimeStamp);
    field public final androidx.test.services.events.TestRunInfo! testRun;
    field public final androidx.test.services.events.TimeStamp! timeStamp;
  }

}

package androidx.test.services.events.run {

  @javax.annotation.processing.Generated("tmp_aidl_gen_path") public interface ITestRunEvent extends android.os.IInterface {
    method public void send(androidx.test.services.events.run.TestRunEvent!) throws android.os.RemoteException;
  }

  public abstract static class ITestRunEvent.Stub extends com.google.android.aidl.BaseStub implements androidx.test.services.events.run.ITestRunEvent {
    ctor public ITestRunEvent.Stub();
    method public static androidx.test.services.events.run.ITestRunEvent! asInterface(android.os.IBinder!);
  }

  public static class ITestRunEvent.Stub.Proxy extends com.google.android.aidl.BaseProxy implements androidx.test.services.events.run.ITestRunEvent {
    method public void send(androidx.test.services.events.run.TestRunEvent!) throws android.os.RemoteException;
  }

  public class TestAssumptionFailureEvent extends androidx.test.services.events.run.TestFailureEvent {
    ctor public TestAssumptionFailureEvent(androidx.test.services.events.TestCaseInfo, androidx.test.services.events.FailureInfo);
  }

  public class TestFailureEvent extends androidx.test.services.events.run.TestRunEventWithTestCase {
    ctor public TestFailureEvent(androidx.test.services.events.TestCaseInfo, androidx.test.services.events.FailureInfo);
    field public final androidx.test.services.events.FailureInfo failure;
  }

  public class TestFinishedEvent extends androidx.test.services.events.run.TestRunEventWithTestCase {
    ctor public TestFinishedEvent(androidx.test.services.events.TestCaseInfo);
  }

  public class TestIgnoredEvent extends androidx.test.services.events.run.TestRunEventWithTestCase {
    ctor public TestIgnoredEvent(androidx.test.services.events.TestCaseInfo);
  }

  public abstract class TestRunEvent implements android.os.Parcelable {
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.services.events.run.TestRunEvent!>! CREATOR;
  }

  public abstract class TestRunEventWithTestCase extends androidx.test.services.events.run.TestRunEvent {
    field public final androidx.test.services.events.TestCaseInfo testCase;
  }

  public class TestRunFinishedEvent extends androidx.test.services.events.run.TestRunEvent {
    ctor public TestRunFinishedEvent(int, int, long, java.util.List<androidx.test.services.events.FailureInfo!>);
    field public final int count;
    field public final java.util.List<androidx.test.services.events.FailureInfo!> failures;
    field public final int ignoreCount;
    field public final long runTime;
  }

  public class TestRunStartedEvent extends androidx.test.services.events.run.TestRunEventWithTestCase {
    ctor public TestRunStartedEvent(androidx.test.services.events.TestCaseInfo);
  }

  public class TestStartedEvent extends androidx.test.services.events.run.TestRunEventWithTestCase {
    ctor public TestStartedEvent(androidx.test.services.events.TestCaseInfo);
  }

}

